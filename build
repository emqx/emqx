#!/usr/bin/env bash

# This script helps to build release artifacts.
# arg1: profile, e.g. emqx-enterprise
# arg2: artifact, e.g. rel | relup | tgz | pkg

set -euo pipefail

if [ "${DEBUG:-0}" -eq 1 ]; then
    set -x
    # set this for rebar3
    export DIAGNOSTIC=1
fi

log() {
    local msg="$1"
    # rebar3 prints ===>, so we print ===<
    echo "===< $msg"
}

log_red() {
    local msg="$1"
    local RED='\033[0;31m' # Red
    local NC='\033[0m' # No Color
    echo -e "${RED}===< ${msg}${NC}"
}

PROFILE_ARG="$1"
ARTIFACT="$2"

is_enterprise() {
    case "$1" in
        *enterprise*)
            echo 'yes'
            ;;
        *)
            echo 'no'
            ;;
    esac
}
PROFILE_ENV="${PROFILE:-${PROFILE_ARG}}"
case "$(is_enterprise "$PROFILE_ARG"),$(is_enterprise "$PROFILE_ENV")" in
    'yes,yes')
        true
        ;;
    'no,no')
        true
        ;;
    *)
        log_red "PROFILE env var is set to '$PROFILE_ENV', but '$0' arg1 is '$PROFILE_ARG'"
        exit 1
        ;;
esac

# make sure PROFILE is exported, it is needed by rebar.config.erl
PROFILE=$PROFILE_ARG
export PROFILE

# ensure dir
cd -P -- "$(dirname -- "${BASH_SOURCE[0]}")"

PKG_VSN="${PKG_VSN:-$(./pkg-vsn.sh "$PROFILE")}"
export PKG_VSN

SYSTEM="$(./scripts/get-distro.sh)"

if [[ $SYSTEM == "el7" ]];
then
    log_red "WARNING: NO SECURITY UPDATES for CentOS 7 QUIC transport"
    export QUICER_TLS_VER=openssl
fi

ARCH="$(uname -m)"
case "$ARCH" in
    x86_64)
        ARCH='amd64'
        ;;
    aarch64)
        ARCH='arm64'
        ;;
    arm*)
        ARCH='arm64'
        ;;
esac
export ARCH

##
## Support RPM and Debian based linux systems
##
if [ "$(uname -s)" = 'Linux' ]; then
    case "${SYSTEM:-}" in
        ubuntu*|debian*|raspbian*)
            PKGERDIR='deb'
            ;;
        *)
            PKGERDIR='rpm'
            ;;
    esac
fi

if [ "${SYSTEM}" = 'windows' ]; then
    # windows does not like the find
    FIND="/usr/bin/find"
    TAR="/usr/bin/tar"
    export BUILD_WITHOUT_ROCKSDB="on"
else
    FIND='find'
    TAR='tar'
fi

prepare_erl_libs() {
    local libs_dir="$1"
    local erl_libs="${ERL_LIBS:-}"
    local sep
    if [ "${SYSTEM}" = 'windows' ]; then
        sep=';'
    else
        sep=':'
    fi
    for app in "${libs_dir}"/*; do
        if [ -d "${app}/ebin" ]; then
            if [ -n "$erl_libs" ]; then
                erl_libs="${erl_libs}${sep}${app}"
            else
                erl_libs="${app}"
            fi
        fi
    done
    export ERL_LIBS="$erl_libs"
}

make_docs() {
    case "$(is_enterprise "$PROFILE")" in
        'yes')
            SCHEMA_MODULE='emqx_enterprise_schema'
            ;;
    esac
    prepare_erl_libs "_build/$PROFILE/checkouts"
    prepare_erl_libs "_build/$PROFILE/lib"
    local docdir="_build/docgen/$PROFILE"
    mkdir -p "$docdir"
    # shellcheck disable=SC2086
    erl -enable-feature maybe_expr -noshell -eval \
        "ok = emqx_conf:dump_schema('$docdir', $SCHEMA_MODULE), \
         halt(0)."
    local desc="$docdir/desc.en.hocon"
    if command -v jq &> /dev/null; then
        log "Generating $desc"
        scripts/merge-i18n.escript | jq --sort-keys . > "$desc"
    else
        # it is not a big deal if we cannot generate the desc
        log_red "NOT Generated: $desc due to jq command missing."
    fi
}

## arg1 is the profile for which the following args (as app names) should be excluded
assert_no_excluded_deps() {
    local profile="$1"
    shift 1
    if [ "$PROFILE" != "$profile" ]; then
        # not currently building the profile which has apps to be excluded
        return 0
    fi
    local rel_dir="_build/$PROFILE/rel/emqx/lib"
    local excluded_apps=( "$@" )
    local found
    for app in "${excluded_apps[@]}"; do
        found="$($FIND "$rel_dir" -maxdepth 1 -type d -name "$app-*")"
        if [ -n "${found}" ]; then
            log_red "ERROR: ${app} should not be included in ${PROFILE}"
            log_red "ERROR: found ${app} in ${rel_dir}"
            exit 1
        fi
    done
}

just_compile_elixir() {
    ./scripts/pre-compile.sh "$PROFILE"
    rm -f rebar.lock
    mix local.rebar --if-missing --force
    mix local.rebar rebar3 "${PWD}/rebar3" --if-missing --force
    # mix local.hex --if-missing --force
    mix local.hex 2.0.6 --if-missing --force
    mix deps.get
    mix compile
}

make_elixir_rel() {
    ./scripts/pre-compile.sh "$PROFILE"
    export_elixir_release_vars "$PROFILE"
    # False positive: shellcheck thinks this `do` is a bash keyword...
    # shellcheck disable=SC1010
    mix do deps.get, release --overwrite
}

## TODO: adjust for mix
make_relup() {
    case "$SYSTEM" in
        macos*)
          log_red "WARNING: relup is not supported on macOS"
          exit 0
          ;;
    esac
    RELUP_TARGET_VSN="$(./pkg-vsn.sh "$PROFILE" --long)"
    export RELUP_TARGET_VSN
    ./rebar3 emqx relup_gen --relup-dir=./rel/relup
    make rel -C _build/default/plugins/emqx_relup
}

cp_dyn_libs() {
    local rel_dir="$1"
    local target_dir="${rel_dir}/dynlibs"
    if ! [ "$(uname -s)" = 'Linux' ]; then
        return 0;
    fi
    mkdir -p "$target_dir"
    while read -r so_file; do
        cp -L "$so_file" "$target_dir/"
    done < <("$FIND" "$rel_dir" -type f \( -name "*.so*" -o -name "beam.smp" \) -print0 \
        | xargs -0 ldd \
        | grep -E '(libcrypto)|(libtinfo)|(libatomic)' \
        | awk '{print $3}' \
        | sort -u)
}

## Re-pack the relx assembled .tar.gz to EMQX's package naming scheme
## It assumes the .tar.gz has been built -- relies on Makefile dependency
make_tgz() {
    local pkgpath="_packages/${PROFILE}"
    local src_tarball
    local target_name
    local target

    # ensure src_tarball exists
    ELIXIR_MAKE_TAR=yes make_elixir_rel

    local relpath="_build/${PROFILE}"
    full_vsn="$(./pkg-vsn.sh "$PROFILE" --long)"

    case "$SYSTEM" in
        macos*)
            target_name="${PROFILE}-${full_vsn}.zip"
            ;;
        windows*)
            target_name="${PROFILE}-${full_vsn}.zip"
            ;;
        *)
            target_name="${PROFILE}-${full_vsn}.tar.gz"
            ;;
    esac

    target="${pkgpath}/${target_name}"

    src_tarball="${relpath}/emqx-${PKG_VSN}.tar.gz"
    tard="$(mktemp -d -t emqx.XXXXXXX)"
    mkdir -p "${tard}/emqx"
    mkdir -p "${pkgpath}"
    if [ ! -f "$src_tarball" ]; then
        log_red "ERROR: $src_tarball is not found"
    fi
    $TAR zxf "${src_tarball}" -C "${tard}/emqx"
    if [ -f "${tard}/emqx/releases/${PKG_VSN}/relup" ]; then
        ./scripts/relup-build/inject-relup.escript "${tard}/emqx/releases/${PKG_VSN}/relup"
    fi
    ## try to be portable for tar.gz packages.
    ## for DEB and RPM packages the dependencies are resoved by yum and apt
    cp_dyn_libs "${tard}/emqx"
    case "$SYSTEM" in
        macos*)
            ./scripts/rel/macos-sign-binaries.sh "${tard}/emqx"
            pushd "${tard}/emqx" >/dev/null
            ## create zip after change dir
            ## to avoid creating an extra level of 'emqx' dir in the .zip file
            zip -r "../${target_name}" -- * >/dev/null
            popd >/dev/null
            mv "${tard}/${target_name}" "${target}"
            ./scripts/rel/macos-notarize-package.sh "${target}"
            # sha256sum may not be available on macos
            openssl dgst -sha256 "${target}" | cut -d ' ' -f 2  > "${target}.sha256"
            ;;
        windows*)
            pushd "${tard}" >/dev/null
            7z a "${target_name}" ./emqx/* >/dev/null
            popd >/dev/null
            mv "${tard}/${target_name}" "${target}"
            sha256sum "${target}" | head -c 64 > "${target}.sha256"
            ;;
        *)
            ## create tar after change dir
            ## to avoid creating an extra level of 'emqx' dir in the .tar.gz file
            pushd "${tard}/emqx" >/dev/null
            $TAR -zcf "../${target_name}" -- *
            popd >/dev/null
            mv "${tard}/${target_name}" "${target}"
            sha256sum "${target}" | head -c 64 > "${target}.sha256"
            ;;
    esac
    log "Archive successfully repacked: ${target}"
    log "Archive sha256sum: $(cat "${target}.sha256")"
}

docker_cleanup() {
    rm -f ./.dockerignore >/dev/null
    # shellcheck disable=SC2015
    [ -f ./.dockerignore.bak ] && mv ./.dockerignore.bak ./.dockerignore >/dev/null || true
}

## Build the default docker image based on debian 12.
make_docker() {
    # shellcheck disable=SC1091
    source ./env.sh
    local BUILD_FROM="${BUILD_FROM:-${EMQX_DOCKER_BUILD_FROM}}"
    # shellcheck disable=SC2155
    local OTP_VSN="$(docker run --rm "${BUILD_FROM}" erl -eval '{ok, Version} = file:read_file(filename:join([code:root_dir(), "releases", erlang:system_info(otp_release), "OTP_VERSION"])), io:fwrite(Version), halt().' -noshell)"
    # shellcheck disable=SC2155
    local ELIXIR_VSN="$(docker run --rm "${BUILD_FROM}" elixir --short-version)"
    local RUN_FROM="${RUN_FROM:-${EMQX_DOCKER_RUN_FROM}}"
    local EMQX_DOCKERFILE="${EMQX_DOCKERFILE:-deploy/docker/Dockerfile}"
    local EMQX_SOURCE_TYPE="${EMQX_SOURCE_TYPE:-src}"
    # shellcheck disable=SC2155
    local VSN_MAJOR="$(scripts/semver.sh "$PKG_VSN" --major)"
    # shellcheck disable=SC2155
    local VSN_MINOR="$(scripts/semver.sh "$PKG_VSN" --minor)"
    # shellcheck disable=SC2155
    local VSN_PATCH="$(scripts/semver.sh "$PKG_VSN" --patch)"
    local SUFFIX=''

    local DOCKER_REGISTRY="${DOCKER_REGISTRY:-docker.io}"
    local DOCKER_REGISTRIES=( )
    IFS=',' read -ra DOCKER_REGISTRY_ARR <<< "$DOCKER_REGISTRY"
    for r in "${DOCKER_REGISTRY_ARR[@]}"; do
        # append to DOCKER_REGISTRIES
        DOCKER_REGISTRIES+=("$r")
    done

    local DOCKER_ORG="${DOCKER_ORG:-emqx}"
    local default_base_tag="${DOCKER_ORG}/${PROFILE}"

    local EMQX_BASE_IMAGE_TAG="${EMQX_BASE_IMAGE_TAG:-$default_base_tag}"
    local DOCKER_IMAGE_BASE_TAGS=( "${EMQX_BASE_IMAGE_TAG}" )
    IFS=',' read -ra DOCKER_IMAGE_BASE_TAGS_ARR <<< "${EMQX_EXTRA_BASE_IMAGE_TAGS:-}"
    for t in "${DOCKER_IMAGE_BASE_TAGS_ARR[@]}"; do
        DOCKER_IMAGE_BASE_TAGS+=("$t")
    done

    DOCKER_IMAGE_TAGS=( )
    for r in "${DOCKER_REGISTRIES[@]}"; do
      for t in "${DOCKER_IMAGE_BASE_TAGS[@]}"; do
        DOCKER_IMAGE_TAGS+=( "$r/$t:${PKG_VSN}${SUFFIX}" )
        if [ "${DOCKER_LATEST:-false}" = true ]; then
          DOCKER_IMAGE_TAGS+=( "$r/$t:latest${SUFFIX}" )
          DOCKER_IMAGE_TAGS+=( "$r/$t:${VSN_MAJOR}.${VSN_MINOR}${SUFFIX}" )
          DOCKER_IMAGE_TAGS+=( "$r/$t:${VSN_MAJOR}.${VSN_MINOR}.${VSN_PATCH}${SUFFIX}" )
        fi
      done
    done

    local EDITION=Enterprise
    local LICENSE='BSL-1.1'
    local PRODUCT_URL='https://emqx.com/en/products/emqx'
    local PRODUCT_DESCRIPTION='Official docker image for EMQX Enterprise, an enterprise MQTT platform at scale.'
    local DOCUMENTATION_URL='https://docs.emqx.com/en/emqx/latest/'
    ## extra_deps is a comma separated list of debian 12 package names
    local EXTRA_DEPS='libsasl2-2,libsasl2-modules-gssapi-mit'
    local ISO_8601_DATE GIT_REVISION
    ISO_8601_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
    GIT_REVISION="$(git rev-parse HEAD)"
    export BUILDX_NO_DEFAULT_ATTESTATIONS=1
    local DOCKER_BUILDX_ARGS=(
       --build-arg BUILD_FROM="${BUILD_FROM}" \
       --build-arg RUN_FROM="${RUN_FROM}" \
       --build-arg SOURCE_TYPE="${EMQX_SOURCE_TYPE}" \
       --build-arg PROFILE="${PROFILE}" \
       --build-arg SUFFIX="${SUFFIX}" \
       --build-arg EXTRA_DEPS="${EXTRA_DEPS}" \
       --build-arg PKG_VSN="${PKG_VSN}" \
       --file "${EMQX_DOCKERFILE}" \
       --label org.opencontainers.image.title="${PROFILE}" \
       --label org.opencontainers.image.edition="${EDITION}" \
       --label org.opencontainers.image.version="${PKG_VSN}" \
       --label org.opencontainers.image.revision="${GIT_REVISION}" \
       --label org.opencontainers.image.created="${ISO_8601_DATE}" \
       --label org.opencontainers.image.source='https://github.com/emqx/emqx' \
       --label org.opencontainers.image.url="${PRODUCT_URL}" \
       --label org.opencontainers.image.description="${PRODUCT_DESCRIPTION}" \
       --label org.opencontainers.image.documentation="${DOCUMENTATION_URL}" \
       --label org.opencontainers.image.licenses="${LICENSE}" \
       --label org.opencontainers.image.otp.version="${OTP_VSN}" \
       --pull
    )
    :> ./.emqx_docker_image_tags
    for t in "${DOCKER_IMAGE_TAGS[@]}"; do
        DOCKER_BUILDX_ARGS+=(--tag "${t}")
        echo "${t}" >> ./.emqx_docker_image_tags
    done
    if [ "${DOCKER_BUILD_NOCACHE:-false}" = true ]; then
        DOCKER_BUILDX_ARGS+=(--no-cache)
    fi
    DOCKER_BUILDX_ARGS+=(--label org.opencontainers.image.elixir.version="${ELIXIR_VSN}")
    if [ "${DOCKER_PLATFORMS:-default}" != 'default' ]; then
        DOCKER_BUILDX_ARGS+=(--platform "${DOCKER_PLATFORMS}")
    fi
    if [ "${DOCKER_PUSH:-false}" = true ]; then
        DOCKER_BUILDX_ARGS+=(--push)
    fi
    if [ "${DOCKER_LOAD:-true}" = true ]; then
        DOCKER_BUILDX_ARGS+=(--load)
    fi
    if [ -d "${REBAR_GIT_CACHE_DIR:-}" ]; then
        cache_tar="$(pwd)/rebar-git-cache.tar"
        if [ ! -f "${cache_tar}" ]; then
            pushd "${REBAR_GIT_CACHE_DIR}" >/dev/null
            tar -cf "${cache_tar}" .
            popd >/dev/null
        fi
    fi
    if [ -n "${DEBUG:-}" ]; then
        DOCKER_BUILDX_ARGS+=(--build-arg DEBUG="${DEBUG}" --progress=plain)
    fi

    # shellcheck disable=SC2015
    [ -f ./.dockerignore ] && mv ./.dockerignore ./.dockerignore.bak || true
    trap docker_cleanup EXIT
    {
        echo '_build/'
        echo 'deps/'
        echo '*.lock'
        echo '_packages/'
        echo '.vs/'
        echo '.vscode/'
        echo 'lux_logs/'
        echo '_upgrade_base/'
    } >> ./.dockerignore
    echo "Docker buildx args: ${DOCKER_BUILDX_ARGS[*]}"
    docker buildx build "${DOCKER_BUILDX_ARGS[@]}" .
}

function join {
  local IFS="$1"
  shift
  echo "$*"
}

# used to control the Elixir Mix Release output
# see docstring in `mix.exs`
export_elixir_release_vars() {
  local profile="$1"
  case "$profile" in
    emqx-enterprise)
      export ELIXIR_MAKE_TAR=${ELIXIR_MAKE_TAR:-no}
      ;;
    emqx-enterprise-pkg)
      export ELIXIR_MAKE_TAR=${ELIXIR_MAKE_TAR:-yes}
      ;;
    *)
      log_red "Invalid profile $profile"
      exit 1
  esac
  export MIX_ENV="$profile"
}

log "building artifact=$ARTIFACT for profile=$PROFILE"

case "$ARTIFACT" in
    apps)
        just_compile_elixir
        ;;
    doc|docs)
        make_docs
        ;;
    rel)
        make_elixir_rel
        ;;
    relup)
        make_relup
        ;;
    tgz)
        make_tgz
        ;;
    pkg)
        # this only affect build artifacts, such as schema doc
        export EMQX_ETC_DIR='/etc/emqx/'
        if [ -z "${PKGERDIR:-}" ]; then
            log "Skipped making deb/rpm package for $SYSTEM"
            exit 0
        fi
        export EMQX_REL_FORM="$PKGERDIR"
        make_tgz
        env EMQX_REL="$(pwd)" \
            EMQX_BUILD="${PROFILE}" \
            make -C "deploy/packages/${PKGERDIR}" clean
        env EMQX_REL="$(pwd)" \
            EMQX_BUILD="${PROFILE}" \
            make -C "deploy/packages/${PKGERDIR}"
        ;;
    docker)
        make_docker
        ;;
    *)
        log_red "Unknown artifact $ARTIFACT"
        exit 1
        ;;
esac
