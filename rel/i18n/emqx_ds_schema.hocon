emqx_ds_schema {
  // Databases:

  messages {
    label: "MQTT message storage"
    desc:
      """~
      Configuration of the durable storage for MQTT messages.~"""
  }

  sessions {
    label: "MQTT session storage"
    desc:
      """~
      Configuration of the durable storage containing state and metadata of the durable sessions.~"""
  }

  timers {
     label: "Durable timers storage"
     desc:
       """~
       Configuration of the durable storage containing timers.~"""
  }

  shared_subs {
     label: "Durable shared subscriptions"
     desc:
       """~
       Configuration of the durable storage containing metadata and topic replay progress by shared subscriptions.~"""
  }

  // Backends types:

  backend_type {
    label: "Backend type"
    desc:
      """~
      Durable storage backend.

      Please note that it's impossible to change the backend of existing durable storages without losing the data.~"""
  }

  builtin_raft {
    label: "Builtin Raft"
    desc:
      """~
      An embedded durable storage backend with support for data replication.

      This backend is intetended for use in clustered EMQX deployments.
      It replicates data for each durable storage shard on several EMQX nodes.~"""
  }

  builtin_local {
    label: "Builtin Local"
    desc:
      """~
      An embedded durable storage backend without network capabilities.

      This backend doesn't support clustering, but it has lower overhead than `builtin_raft`.
      It's recommended for use in strictly single-node deployments.~"""
  }

  // Common options

  builtin_n_shards {
    label: "Number of shards"
    desc:
      """~
      The durable storage partitions data into shards.
      This configuration parameter defines the number of shards.
      Please note that it takes effect only during the initialization of the durable storage database.
      Changing this configuration parameter after the database has been already created won't take any effect.~"""
  }


  // Common options of builtin backends:

  builtin_data_dir {
    label: "Database location"
    desc:
      """~
      Root directory for the data related to built-in storage backends.

      By default it is equal to `node.data_dir`.~"""
  }

  // OTX

  optimistic_transaction {
    label: "Transaction"
    desc:
      """~
      Transaction settings for built-in durable storage backends.~"""
  }

  builtin_optimistic_transaction {
    label: "Transaction settings"
    desc: "Transaction settings."
  }

  otx_flush_interval {
    label: "Transaction flush interval"
    desc:
      """~
      Specifies the maximum time operations may linger in the buffer before they are committed to the storage.
      Larger values of the parameter may improve the throughput while negatively affecting the latency.~"""
  }

  otx_idle_flush_interval {
    label: "Idle transaction flush interval"
    desc:
      """~
      If shard doesn't receive new transactions within this period, the buffer is flushed early.~"""
  }

  otx_conflict_window {
    label: "Conflict tracking window"
    desc:
      """~
      Built-in durable storage backends track recent updates over a period of time known as the conflict tracking window.

      Transactions that started earlier than the beginning of the window are automatically rejected.
      So, effectively, this parameter limits the time the transactions can run.

      Higher values reduce the risk of rejecting transactions due to long run time, but may increase RAM demands.

      This value should be greater than the flush interval.~"""
  }

  // RocksDB tuning:

  rocksdb_options {
    label: "RocksDB options"
    desc:
      """~
      Options concerning behavior of RocksDB databases used by the built-in durable storage backends.~"""
  }

  rocksdb_cache_size {
    label: "RocksDB cache size"
    desc:
      """~
      Size of the RocksDB block cache.

      Note that increasing this value may not necessarily reduce I/O, since the compressed data may reside in the OS's page cache, but it can reduce CPU load at the expense of memory usage.

      Each shard of the database has its own cache.~"""
  }

  rocksdb_write_buffer_size {
    label: "RocksDB write buffer size"
    desc:
      """~
      Maximum size of the RocksDB memtables.

      Memtable is a buffer where newly written data is kept before it is flushed to disk.

      Each shard of the database has its own memtable.~"""
  }

  rocksdb_max_open_files {
    label: "Maximum open files"
    desc:
      """~
      Maximum number of open file descriptors per shard.~"""
  }

  // Raft-specific settings

  builtin_raft_replication_factor {
    label: "Replication factor"
    desc:
      """~
      Number of identical replicas each shard should have.
      Increasing this number improves durability and availability at the expense of greater resource consumption.
      Quorum of replicas is needed to be healthy for the replication to work, hence an odd number of replicas is a good pick in general.
      Please note that it takes effect only during the initialization of the durable storage database.
      Changing this configuration parameter after the database has been already created won't take any effect.~"""
  }


  builtin_raft_n_sites {
      label: "Initial number of sites"
      desc:
        """~
        Number of storage sites that need to share responsibility over the set of storage shards.
        In this context, sites are EMQX nodes with message durability enabled.
        Please note that it takes effect only during the initialization of the durable storage database.
        During this phase at least that many sites should come online to distribute shards between them, otherwise message storage will be unavailable until then.
        After the initialization is complete, sites may be offline, which will affect availability depending on the number of offline sites and replication factor.~"""
  }

  // Storage layouts:

  builtin_layout {
    label: "Storage layout"
    desc:
      """~
      Storage layout is a method of arranging messages from various topics and clients on disc.

      Depending on the type of workload and the topic structure, different types of strategies for storing the data can be employed to maximize efficiency of reading messages from the durable storage.~"""
  }

  layout_builtin_wildcard_optimized_type {
    label: "Layout type"
    desc:
      """~
      Wildcard-optimized layout type.~"""
  }

  layout_builtin_wildcard_optimized {
    label: "Wildcard-optimized storage layout"
    desc:
      """~
      _Wildcard-optimized_ layout is designed to maximize the throughput of wildcard subscriptions covering large numbers of topics.

      For example, it can handle scenarios where a very large number of clients publish data to the topics containing their client ID, such as: `sensor/%device-version%/%clientid%/temperature`, `sensor/%device-version%/%clientid%/pressure`, etc.
      This layout will automatically group such topics into a single stream, so a client subscribing to a topic filter containing wildcards (such as `sensor/+/+/temperature`) will be able to consume messages published by all devices as a single batch.

      This layout is efficient for non-wildcard subscriptions as well.~"""
  }

  lts_wildcard_thresholds {
    label: "Wildcard thresholds"
    desc:
      """~
      Array of wildcard thresholds for different topic levels.

      EMQX can automatically group similar topic together to increase efficiency of message storage and retrieval.

      To understand the meaning of this configuration one can think of MQTT topics as a tree.
      When the number of children of a particular tree node reaches the threshold, EMQX performs the grouping.

      Adjusting this parameter helps when the topic structure is known in advance.
      For example, in the situations where multiple clients publish messages to a topic containing their client ID,
      such as `sensor/<clientid>/temperature/<room>`.
      Since `<clientid>` and `<room>` parts of the topic are variable, one can lower the wildcard threshold for topic levels 2 and 4 by setting this parameter to `[100, 0, 100, 0, 100]`.

      Each element of the array corresponds to a particular level of the topic.

      The last element of the array corresponds to all remaining levels as well.

      The array can't be empty.~"""
  }
}
