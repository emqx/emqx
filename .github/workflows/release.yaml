name: Upload release assets
on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        type: string
        required: true
      publish_release_artifacts:
        type: boolean
        required: true
        default: false

permissions:
  contents: read

jobs:
  upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      packages: write
      actions: read
      issues: read
      pull-requests: read
      repository-projects: read
      statuses: read
    strategy:
      fail-fast: false
    steps:
      - uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.inputs.tag }}
      - name: Detect profile
        id: profile
        run: |
          if git describe --tags --match 'e*' --exact; then
            REF=$(git describe --tags --match 'e*' --exact)
          else
            echo "Only release tags matching 'e*' are supported"
            exit 1
          fi
          case "$REF" in
            e*)
              echo "profile=emqx-enterprise" >> $GITHUB_OUTPUT
              echo "version=$(./pkg-vsn.sh emqx-enterprise)" >> $GITHUB_OUTPUT
              echo "ref_name=e$(./pkg-vsn.sh emqx-enterprise)" >> "$GITHUB_ENV"
              if [[ $ref_name =~ ^e[6-9]+\.[0-9]+\.[0-9]+-M[0-9]+\.[0-9]+.*$ ]]; then
                echo "internal_release=true" >> $GITHUB_ENV
              else
                echo "internal_release=false" >> $GITHUB_ENV
              fi
              echo "s3dir=emqx-ee" >> $GITHUB_OUTPUT
              ;;
          esac
      - name: Get packages
        run: |
          BUCKET=${{ secrets.AWS_S3_BUCKET }}
          OUTPUT_DIR=${{ steps.profile.outputs.s3dir }}
          aws s3 cp --recursive s3://$BUCKET/$OUTPUT_DIR/${{ env.ref_name }} packages
      - uses: emqx/upload-assets@974befcf0e72a1811360a81c798855efb66b0551 # 0.5.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["packages/*"]'
          tag_name: "${{ env.ref_name }}"
          skip_existing: true
      - name: update to emqx.io
        if: (github.event_name == 'release' &&  !github.event.release.prerelease && env.internal_release == 'false') || inputs.publish_release_artifacts
        run: |
          set -eux
          curl -w %{http_code} \
               --insecure \
               -H "Content-Type: application/json" \
               -H "token: ${{ secrets.EMQX_IO_TOKEN }}" \
               -X POST \
               -d "{\"repo\":\"emqx/emqx\", \"tag\": \"${{ env.ref_name }}\" }" \
               ${{ secrets.EMQX_IO_RELEASE_API }}
      - name: Push to packagecloud.io
        if: (github.event_name == 'release' && !github.event.release.prerelease && env.internal_release == 'false') || inputs.publish_release_artifacts
        env:
          PROFILE: ${{ steps.profile.outputs.profile }}
          VERSION: ${{ steps.profile.outputs.version }}
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
        run: |
          set -eu
          REPO='emqx-enterprise5'
          function push() {
            docker run -t --rm -e PACKAGECLOUD_TOKEN=$PACKAGECLOUD_TOKEN -v $(pwd)/$2:/w/$2 -w /w ghcr.io/emqx/package_cloud push emqx/$REPO/$1 $2
          }
          push "debian/bullseye" "packages/$PROFILE-$VERSION-debian11-amd64.deb"
          push "debian/bullseye" "packages/$PROFILE-$VERSION-debian11-arm64.deb"
          push "debian/bookworm" "packages/$PROFILE-$VERSION-debian12-amd64.deb"
          push "debian/bookworm" "packages/$PROFILE-$VERSION-debian12-arm64.deb"
          push "ubuntu/focal" "packages/$PROFILE-$VERSION-ubuntu20.04-amd64.deb"
          push "ubuntu/focal" "packages/$PROFILE-$VERSION-ubuntu20.04-arm64.deb"
          push "ubuntu/jammy" "packages/$PROFILE-$VERSION-ubuntu22.04-amd64.deb"
          push "ubuntu/jammy" "packages/$PROFILE-$VERSION-ubuntu22.04-arm64.deb"
          push "ubuntu/noble" "packages/$PROFILE-$VERSION-ubuntu24.04-amd64.deb"
          push "ubuntu/noble" "packages/$PROFILE-$VERSION-ubuntu24.04-arm64.deb"
          push "el/7" "packages/$PROFILE-$VERSION-el7-amd64.rpm"
          push "el/7" "packages/$PROFILE-$VERSION-el7-arm64.rpm"
          push "el/8" "packages/$PROFILE-$VERSION-el8-amd64.rpm"
          push "el/8" "packages/$PROFILE-$VERSION-el8-arm64.rpm"
          push "el/9" "packages/$PROFILE-$VERSION-el9-amd64.rpm"
          push "el/9" "packages/$PROFILE-$VERSION-el9-arm64.rpm"
          push "amazon/2" "packages/$PROFILE-$VERSION-amzn2-amd64.rpm"
          push "amazon/2" "packages/$PROFILE-$VERSION-amzn2-arm64.rpm"
          push "amazon/2023" "packages/$PROFILE-$VERSION-amzn2023-amd64.rpm"
          push "amazon/2023" "packages/$PROFILE-$VERSION-amzn2023-arm64.rpm"

      - name: Upload to snap store
        if: (github.event_name == 'release' && !github.event.release.prerelease && env.internal_release == 'false') || inputs.publish_release_artifacts
        env:
          PROFILE: ${{ steps.profile.outputs.profile }}
          VERSION: ${{ steps.profile.outputs.version }}
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
        run: |
          sudo snap install snapcraft --classic
          snapcraft upload --release=stable "packages/${PROFILE}_${VERSION}_amd64.snap"
          snapcraft upload --release=stable "packages/${PROFILE}_${VERSION}_arm64.snap"
