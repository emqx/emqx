name: Build and push docker images

concurrency:
  group: docker-build-${{ github.event_name }}-${{ inputs.profile }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      profile:
        required: true
        type: string
      latest:
        required: false
        type: string
        default: false
      publish:
        required: false
        type: boolean
        default: false
      GITHUB_APP_TOKEN:
        required: true
        type: string
    secrets:
      DOCKER_HUB_USER:
        required: false
      DOCKER_HUB_TOKEN:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_DEFAULT_REGION:
        required: false
      AWS_S3_BUCKET:
        required: false
      AWS_CLOUDFRONT_ID:
        required: false
  workflow_dispatch:
    inputs:
      ref:
        required: false
      profile:
        required: false
        type: string
        default: 'emqx-enterprise'
      latest:
        required: false
        type: boolean
        default: false
      publish:
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ github.repository_owner == 'emqx' && format('aws-ubuntu22.04-{0}', matrix.arch) || (matrix.arch == 'arm64' && 'ubuntu-22.04-arm' || 'ubuntu-22.04') }}
    outputs:
      PKG_VSN: ${{ steps.build.outputs.PKG_VSN }}

    strategy:
      fail-fast: false
      matrix:
        profile:
          - ${{ inputs.profile }}
        arch:
          - amd64
          - arm64

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.inputs.ref }}
      - name: build release tarball
        id: build
        env:
          BUILDER_SYSTEM: force_docker
        run: |
          source ./env.sh
          ./scripts/buildx.sh --profile ${{ matrix.profile }} --pkgtype tgz --builder "$EMQX_DOCKER_BUILD_FROM"
          PKG_VSN=$(docker run --rm -v $(pwd):$(pwd) -w $(pwd) -u $(id -u) "$EMQX_DOCKER_BUILD_FROM" ./pkg-vsn.sh "${{ matrix.profile }}")
          echo "PKG_VSN=$PKG_VSN" >> "$GITHUB_OUTPUT"
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "${{ matrix.profile }}-${{ matrix.arch }}.tar.gz"
          path: "_packages/emqx*/emqx-*.tar.gz"
          retention-days: 7
          overwrite: true
          if-no-files-found: error

  docker:
    runs-on: ubuntu-22.04
    needs:
      - build
    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        profile:
          - "${{ inputs.profile }}"

    env:
      PROFILE: ${{ matrix.profile }}
      DOCKER_ORG: ${{ github.repository_owner }}
      DOCKER_LATEST: ${{ inputs.latest }}
      PKG_VSN: ${{ needs.build.outputs.PKG_VSN }}
      EMQX_SOURCE_TYPE: tgz

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.inputs.ref }}

      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: "${{ matrix.profile }}-*.tar.gz"
          path: _packages
          merge-multiple: true

      - name: Move artifacts to root directory
        env:
          PROFILE: ${{ inputs.profile }}
        run: |
          ls -lR _packages/$PROFILE
          mv _packages/$PROFILE/*.tar.gz ./

      - name: Enable containerd image store on Docker Engine
        run: |
          echo "$(sudo cat /etc/docker/daemon.json | jq '. += {"features": {"containerd-snapshotter": true}}')" > daemon.json
          sudo mv daemon.json /etc/docker/daemon.json
          sudo systemctl restart docker

      - uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Login to hub.docker.com
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        if: inputs.publish
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to ghcr.io
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ inputs.GITHUB_APP_TOKEN }}

      - name: Build and push docker image to ghcr.io
        env:
          DOCKER_PUSH: true
          DOCKER_BUILD_NOCACHE: true
          DOCKER_PLATFORMS: linux/amd64,linux/arm64
          DOCKER_LOAD: false
          DOCKER_REGISTRY: ghcr.io
          DOCKER_ORG: ${{ github.repository_owner }}
          EMQX_BASE_IMAGE_TAG: ${{ github.repository_owner }}/emqx
        run: |
          ./build ${PROFILE} docker
          echo "Built tags:"
          echo "==========="
          cat .emqx_docker_image_tags
          echo "==========="
          echo "_EMQX_DOCKER_IMAGE_TAG=$(head -n 1 .emqx_docker_image_tags)" >> $GITHUB_ENV
          head -n 1 .emqx_docker_image_tags > docker-image-tag

      - name: Pull image from ghcr.io for local testing
        run: |
          docker pull $_EMQX_DOCKER_IMAGE_TAG

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "${{ matrix.profile }}-docker-image-tag"
          path: "docker-image-tag"
          retention-days: 7

      - name: Verify that size of docker image is less than 140 MB
        run: |
          docker save $_EMQX_DOCKER_IMAGE_TAG | gzip -c | wc -c | xargs -I {} test {} -lt 140000000

      - name: smoke test
        timeout-minutes: 5
        run: |
          CID=$(docker run -d -p 18083:18083 $_EMQX_DOCKER_IMAGE_TAG)
          HTTP_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "18083/tcp") 0).HostPort}}' $CID)
          ./scripts/test/emqx-smoke-test.sh localhost $HTTP_PORT
          docker rm -f $CID
          ./scripts/test/cluster-smoke-test.sh $_EMQX_DOCKER_IMAGE_TAG

      - name: dashboard tests
        working-directory: ./scripts/ui-tests
        timeout-minutes: 5
        run: |
          set -eu
          docker compose up --abort-on-container-exit --exit-code-from selenium
          docker compose rm -fsv

      - name: test node_dump
        run: |
          CID=$(docker run -d -P $_EMQX_DOCKER_IMAGE_TAG)
          docker exec -t -u root -w /root $CID bash -c 'apt-get -y update && apt-get -y install net-tools'
          docker exec -t -u root $CID node_dump
          docker rm -f $CID

      - name: export docker image
        run: |
          docker save "${_EMQX_DOCKER_IMAGE_TAG}" | gzip > $PROFILE-docker-$PKG_VSN.tar.gz

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "${{ matrix.profile }}-docker"
          path: "${{ matrix.profile }}-docker-${{ env.PKG_VSN }}.tar.gz"
          retention-days: 7

      - name: Promote image from ghcr.io to docker.io
        if: inputs.publish
        env:
          DOCKER_ORG: "${{ github.repository_owner }}"
        run: |
          # Read source tag from ghcr.io
          SOURCE_TAG=$(head -n 1 .emqx_docker_image_tags)
          echo "Source image: $SOURCE_TAG"

          # Convert ghcr.io tags to docker.io tags
          # Also add corresponding tags for emqx-enterprise profile
          DOCKER_IO_TAGS=""
          while IFS= read -r tag; do
            # Replace ghcr.io with docker.io and /emqx with /${PROFILE}
            docker_io_tag=$(echo "$tag" | sed "s|ghcr.io/$DOCKER_ORG/emqx|docker.io/$DOCKER_ORG/${PROFILE}|g")
            DOCKER_IO_TAGS="$DOCKER_IO_TAGS --tag $docker_io_tag"
            echo "Target tag: $docker_io_tag"

            # Also add emqx/emqx tag for extra base image tags
            extra_tag=$(echo "$tag" | sed "s|ghcr.io/$DOCKER_ORG/emqx|docker.io/$DOCKER_ORG/emqx|g")
            DOCKER_IO_TAGS="$DOCKER_IO_TAGS --tag $extra_tag"
            echo "Target tag: $extra_tag"
          done < .emqx_docker_image_tags

          # Copy multiarch image from ghcr.io to docker.io with all tags
          docker buildx imagetools create $DOCKER_IO_TAGS "$SOURCE_TAG"

  docker-sfodbc:
    runs-on: ubuntu-22.04
    if: inputs.profile == 'emqx-enterprise'
    needs:
      - build
      - docker
    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false

    env:
      PROFILE: ${{ inputs.profile }}
      DOCKER_LATEST: false
      PKG_VSN: ${{ needs.build.outputs.PKG_VSN }}
      EMQX_DOCKERFILE: 'deploy/docker/Dockerfile.sfodbc'
      DOCKER_IMAGE_SUFFIX: '-sf'

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.inputs.ref }}

      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: "${{ env.PROFILE }}-docker-image-tag"

      - name: Enable containerd image store on Docker Engine
        run: |
          echo "$(sudo cat /etc/docker/daemon.json | jq '. += {"features": {"containerd-snapshotter": true}}')" > daemon.json
          sudo mv daemon.json /etc/docker/daemon.json
          sudo systemctl restart docker

      - uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Login to hub.docker.com
        if: inputs.publish
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to ghcr.io
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multiarch docker image to ghcr.io
        env:
          DOCKER_PUSH: true
          DOCKER_BUILD_NOCACHE: true
          DOCKER_PLATFORMS: linux/amd64,linux/arm64
          DOCKER_LOAD: false
          DOCKER_REGISTRY: ghcr.io
          DOCKER_ORG: ${{ github.repository_owner }}
          EMQX_BASE_IMAGE_TAG: ${{ github.repository_owner }}/emqx
        run: |
          # Use the ghcr.io image from the regular docker job as base
          export BUILD_FROM=$(cat docker-image-tag)
          echo "BUILD_FROM=$BUILD_FROM" >> $GITHUB_ENV
          ./build ${PROFILE} docker
          echo "Built tags:"
          echo "==========="
          cat .emqx_docker_image_tags
          echo "==========="
          echo "_EMQX_DOCKER_IMAGE_TAG=$(head -n 1 .emqx_docker_image_tags)" >> $GITHUB_ENV
          head -n 1 .emqx_docker_image_tags > docker-image-tag

      - name: Pull image from ghcr.io for local testing
        run: |
          docker pull $_EMQX_DOCKER_IMAGE_TAG

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "${{ env.PROFILE }}-sf-docker-image-tag"
          path: "docker-image-tag"
          retention-days: 7

      - name: smoke test
        timeout-minutes: 1
        run: |
          CID=$(docker run -d -p 18083:18083 $_EMQX_DOCKER_IMAGE_TAG)
          HTTP_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "18083/tcp") 0).HostPort}}' $CID)
          ./scripts/test/emqx-smoke-test.sh localhost $HTTP_PORT
          docker rm -f $CID

      - name: dashboard tests
        working-directory: ./scripts/ui-tests
        timeout-minutes: 5
        run: |
          set -eu
          docker compose up --abort-on-container-exit --exit-code-from selenium
          docker compose rm -fsv

      - name: test node_dump
        run: |
          CID=$(docker run -d -P $_EMQX_DOCKER_IMAGE_TAG)
          docker exec -t -u root -w /root $CID bash -c 'apt-get -y update && apt-get -y install net-tools'
          docker exec -t -u root $CID node_dump
          docker rm -f $CID

      - name: Promote snowflake image from ghcr.io to docker.io
        if: inputs.publish
        env:
          DOCKER_ORG: "${{ github.repository_owner }}"
        run: |
          # Read source tag from ghcr.io
          SOURCE_TAG=$(head -n 1 .emqx_docker_image_tags)
          echo "Source image: $SOURCE_TAG"

          # Convert ghcr.io tags to docker.io tags
          # Also add corresponding tags for emqx-enterprise profile
          DOCKER_IO_TAGS=""
          while IFS= read -r tag; do
            # Replace ghcr.io with docker.io and /emqx with /${PROFILE}
            docker_io_tag=$(echo "$tag" | sed "s|ghcr.io/$DOCKER_ORG/emqx|docker.io/$DOCKER_ORG/${PROFILE}|g")
            DOCKER_IO_TAGS="$DOCKER_IO_TAGS --tag $docker_io_tag"
            echo "Target tag: $docker_io_tag"
          done < .emqx_docker_image_tags

          # Copy multiarch image from ghcr.io to docker.io with all tags
          docker buildx imagetools create $DOCKER_IO_TAGS "$SOURCE_TAG"

  upload:
    runs-on: ubuntu-22.04
    if: inputs.publish || github.repository_owner != 'emqx'

    needs:
      - build
      - docker

    strategy:
      fail-fast: false
      matrix:
        profile:
          - ${{ inputs.profile }}
        arch:
          - amd64
          - arm64
    env:
      PKG_VSN: ${{ needs.build.outputs.PKG_VSN }}
      FILENAME: "${{ matrix.profile }}-${{ needs.build.outputs.PKG_VSN }}-docker-${{ matrix.arch }}.tar.gz"

    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: "${{ matrix.profile }}-docker-image-tag"

      - name: export docker image to .tar.gz
        run: |
          set -xeuo pipefail

          export _EMQX_DOCKER_IMAGE_TAG=$(cat docker-image-tag)
          docker pull "${_EMQX_DOCKER_IMAGE_TAG}"
          docker save "${_EMQX_DOCKER_IMAGE_TAG}" | gzip > "$FILENAME"

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.profile }}-docker-image-${{ matrix.arch }}
          path: ${{ env.FILENAME }}

      - uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: upload to aws s3
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_CLOUDFRONT_ID: ${{ secrets.AWS_CLOUDFRONT_ID }}
        run: |
          set -xeuo pipefail

          export s3dir="emqx-ee/e$PKG_VSN"
          aws s3 cp "$FILENAME" "s3://$AWS_S3_BUCKET/$s3dir/"
          aws cloudfront create-invalidation --distribution-id "$AWS_CLOUDFRONT_ID" --paths "/$s3dir/*docker*"
