name: Build and push docker images

concurrency:
  group: docker-build-${{ github.event_name }}-${{ inputs.profile }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      profile:
        required: true
        type: string
      latest:
        required: false
        type: string
        default: false
      publish:
        required: false
        type: boolean
        default: false
    secrets:
      DOCKER_HUB_USER:
        required: false
      DOCKER_HUB_TOKEN:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_DEFAULT_REGION:
        required: false
      AWS_S3_BUCKET:
        required: false
      AWS_CLOUDFRONT_ID:
        required: false
  workflow_dispatch:
    inputs:
      ref:
        required: false
      profile:
        required: false
        type: string
        default: 'emqx-enterprise'
      latest:
        required: false
        type: boolean
        default: false
      publish:
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  docker:
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-22.04-arm' || 'ubuntu-22.04' }}
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        profile:
          - "${{ inputs.profile }}"
        arch:
          - amd64
          - arm64

    env:
      PROFILE: ${{ matrix.profile }}
      DOCKER_ORG: ${{ github.repository_owner }}
      DOCKER_LATEST: ${{ inputs.latest }}
      ARCH: ${{ matrix.arch }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.inputs.ref }}

      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build docker image
        env:
          DOCKER_PUSH: false
          DOCKER_BUILD_NOCACHE: true
          DOCKER_LOAD: true
        run: |
          ./build ${PROFILE} docker
          echo "Built tags:"
          echo "==========="
          cat .emqx_docker_image_tags
          echo "==========="
          echo "_EMQX_DOCKER_IMAGE_TAG=$(head -n 1 .emqx_docker_image_tags)" >> $GITHUB_ENV

      - name: Verify that size of docker image is less than 140 MB
        run: |
          docker save $_EMQX_DOCKER_IMAGE_TAG | gzip -c | wc -c | xargs -I {} test {} -lt 140000000

      - name: smoke test
        timeout-minutes: 5
        run: |
          CID=$(docker run -d -p 18083:18083 $_EMQX_DOCKER_IMAGE_TAG)
          HTTP_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "18083/tcp") 0).HostPort}}' $CID)
          ./scripts/test/emqx-smoke-test.sh localhost $HTTP_PORT
          docker rm -f $CID
          ./scripts/test/cluster-smoke-test.sh $_EMQX_DOCKER_IMAGE_TAG

      - name: dashboard tests
        working-directory: ./scripts/ui-tests
        timeout-minutes: 5
        run: |
          set -eu
          docker compose up --abort-on-container-exit --exit-code-from selenium
          docker compose rm -fsv

      - name: test node_dump
        run: |
          CID=$(docker run -d -P $_EMQX_DOCKER_IMAGE_TAG)
          docker exec -t -u root -w /root $CID bash -c 'apt-get -y update && apt-get -y install net-tools'
          docker exec -t -u root $CID node_dump
          docker rm -f $CID

      - name: Export docker image
        run: |
          docker save "${_EMQX_DOCKER_IMAGE_TAG}" | gzip > $PROFILE-docker-${{ matrix.arch }}.tar.gz

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "${{ matrix.profile }}-docker-${{ matrix.arch }}"
          path: "${{ matrix.profile }}-docker-${{ matrix.arch }}.tar.gz"
          retention-days: 7

  docker-sfodbc:
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-22.04-arm' || 'ubuntu-22.04' }}
    if: inputs.profile == 'emqx-enterprise'
    needs:
      - docker
    defaults:
      run:
        shell: bash

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64

    env:
      PROFILE: ${{ inputs.profile }}
      DOCKER_LATEST: false
      ARCH: ${{ matrix.arch }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.inputs.ref }}

      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: "${{ env.PROFILE }}-docker-${{ matrix.arch }}"

      - name: Load and push base image to local registry
        run: |
          # Load the base image
          BASE_TAG=$(docker load < $PROFILE-docker-${{ matrix.arch }}.tar.gz | grep "Loaded image:" | sed 's/Loaded image: //')
          echo "Loaded base image: $BASE_TAG"

          # Extract version from tag
          PKG_VSN=$(echo "$BASE_TAG" | sed 's/.*://')
          echo "PKG_VSN=$PKG_VSN" >> $GITHUB_ENV

          # Push to local registry so buildx can access it
          LOCAL_TAG="localhost:5000/emqx/${PROFILE}:${PKG_VSN}"
          docker tag "$BASE_TAG" "$LOCAL_TAG"
          docker push "$LOCAL_TAG"

          echo "BASE_TAG=$LOCAL_TAG" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          driver-opts: network=host

      - name: Build snowflake docker image
        env:
          DOCKER_PUSH: false
          DOCKER_BUILD_NOCACHE: true
          DOCKER_LOAD: true
          EMQX_DOCKERFILE: 'deploy/docker/Dockerfile.sfodbc'
          DOCKER_IMAGE_SUFFIX: '-sf'
        run: |
          # Use the base image loaded from artifact
          export BUILD_FROM=$BASE_TAG
          echo "Building from: $BUILD_FROM"
          ./build ${PROFILE} docker
          echo "Built tags:"
          echo "==========="
          cat .emqx_docker_image_tags
          echo "==========="
          echo "_EMQX_DOCKER_IMAGE_TAG=$(head -n 1 .emqx_docker_image_tags)" >> $GITHUB_ENV

      - name: smoke test
        timeout-minutes: 1
        run: |
          CID=$(docker run -d -p 18083:18083 $_EMQX_DOCKER_IMAGE_TAG)
          HTTP_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "18083/tcp") 0).HostPort}}' $CID)
          ./scripts/test/emqx-smoke-test.sh localhost $HTTP_PORT
          docker rm -f $CID

      - name: dashboard tests
        working-directory: ./scripts/ui-tests
        timeout-minutes: 5
        run: |
          set -eu
          docker compose up --abort-on-container-exit --exit-code-from selenium
          docker compose rm -fsv

      - name: test node_dump
        run: |
          CID=$(docker run -d -P $_EMQX_DOCKER_IMAGE_TAG)
          docker exec -t -u root -w /root $CID bash -c 'apt-get -y update && apt-get -y install net-tools'
          docker exec -t -u root $CID node_dump
          docker rm -f $CID

      - name: Export snowflake docker image
        run: |
          docker save "${_EMQX_DOCKER_IMAGE_TAG}" | gzip > $PROFILE-docker-sf-${{ matrix.arch }}.tar.gz

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "${{ env.PROFILE }}-sf-docker-${{ matrix.arch }}"
          path: "${{ env.PROFILE }}-docker-sf-${{ matrix.arch }}.tar.gz"
          retention-days: 7

  publish-docker:
    runs-on: ubuntu-22.04
    if: inputs.publish
    needs:
      - docker
    defaults:
      run:
        shell: bash

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    env:
      PROFILE: ${{ inputs.profile }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.inputs.ref }}

      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          driver-opts: network=host

      - name: Login to hub.docker.com
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Download docker images
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: "${{ env.PROFILE }}-docker-*"
          path: images/
          merge-multiple: true

      - name: Load, push and create multiarch manifest
        run: |
          # Load AMD64 image and retag to prevent overwriting
          AMD64_IMAGE=$(docker load < images/$PROFILE-docker-amd64.tar.gz | grep "Loaded image:" | sed 's/Loaded image: //')
          echo "Loaded AMD64 image: $AMD64_IMAGE"
          VERSION=$(echo "$AMD64_IMAGE" | sed 's/.*://')
          LOCAL_BASE="localhost:5000/${{ github.repository_owner }}/${PROFILE}"
          docker tag "$AMD64_IMAGE" "${LOCAL_BASE}:${VERSION}-amd64"
          docker push "${LOCAL_BASE}:${VERSION}-amd64"

          # Load ARM64 image and retag
          ARM64_IMAGE=$(docker load < images/$PROFILE-docker-arm64.tar.gz | grep "Loaded image:" | sed 's/Loaded image: //')
          echo "Loaded ARM64 image: $ARM64_IMAGE"
          docker tag "$ARM64_IMAGE" "${LOCAL_BASE}:${VERSION}-arm64"
          docker push "${LOCAL_BASE}:${VERSION}-arm64"

          # Create multiarch manifests and push to docker.io
          DOCKER_IO_PROFILE_TAG="docker.io/${{ github.repository_owner }}/${PROFILE}:$VERSION"
          DOCKER_IO_EMQX_TAG="docker.io/emqx/emqx:$VERSION"

          echo "Creating multiarch manifest for docker.io:"
          echo "  - $DOCKER_IO_PROFILE_TAG"
          echo "  - $DOCKER_IO_EMQX_TAG"
          docker buildx imagetools create \
            --tag "$DOCKER_IO_PROFILE_TAG" \
            --tag "$DOCKER_IO_EMQX_TAG" \
            "${LOCAL_BASE}:${VERSION}-amd64" \
            "${LOCAL_BASE}:${VERSION}-arm64"

  publish-docker-sfodbc:
    runs-on: ubuntu-22.04
    if: inputs.publish && inputs.profile == 'emqx-enterprise'
    needs:
      - docker-sfodbc
    defaults:
      run:
        shell: bash

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    env:
      PROFILE: ${{ inputs.profile }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.inputs.ref }}

      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          driver-opts: network=host

      - name: Login to hub.docker.com
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Download docker images
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: "${{ env.PROFILE }}-sf-docker-*"
          path: images/
          merge-multiple: true

      - name: Load, push and create multiarch manifest
        run: |
          # Load AMD64 image and retag to prevent overwriting
          AMD64_IMAGE=$(docker load < images/$PROFILE-docker-sf-amd64.tar.gz | grep "Loaded image:" | sed 's/Loaded image: //')
          echo "Loaded AMD64 image: $AMD64_IMAGE"
          VERSION=$(echo "$AMD64_IMAGE" | sed 's/.*://')
          LOCAL_BASE="localhost:5000/${{ github.repository_owner }}/${PROFILE}"
          docker tag "$AMD64_IMAGE" "${LOCAL_BASE}:${VERSION}-amd64"
          docker push "${LOCAL_BASE}:${VERSION}-amd64"

          # Load ARM64 image and retag
          ARM64_IMAGE=$(docker load < images/$PROFILE-docker-sf-arm64.tar.gz | grep "Loaded image:" | sed 's/Loaded image: //')
          echo "Loaded ARM64 image: $ARM64_IMAGE"
          docker tag "$ARM64_IMAGE" "${LOCAL_BASE}:${VERSION}-arm64"
          docker push "${LOCAL_BASE}:${VERSION}-arm64"

          # Create multiarch manifest and push to docker.io (only profile-specific tag for snowflake)
          DOCKER_IO_PROFILE_TAG="docker.io/${{ github.repository_owner }}/${PROFILE}:$VERSION"

          echo "Creating multiarch manifest for docker.io:"
          echo "  - $DOCKER_IO_PROFILE_TAG"
          docker buildx imagetools create \
            --tag "$DOCKER_IO_PROFILE_TAG" \
            "${LOCAL_BASE}:${VERSION}-amd64" \
            "${LOCAL_BASE}:${VERSION}-arm64"

  upload:
    runs-on: ubuntu-22.04
    if: inputs.publish || github.repository_owner != 'emqx'

    needs:
      - docker

    strategy:
      fail-fast: false
      matrix:
        profile:
          - ${{ inputs.profile }}
        arch:
          - amd64
          - arm64
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: "${{ matrix.profile }}-docker-${{ matrix.arch }}"

      - name: Extract version from docker image
        run: |
          FILENAME="${{ matrix.profile }}-docker-${{ matrix.arch }}.tar.gz"
          IMAGE_TAG=$(tar -xzOf "$FILENAME" manifest.json | grep -o '"[^"]*:[^"]*"' | head -1 | tr -d '"')
          PKG_VSN=$(echo "$IMAGE_TAG" | sed 's/.*://')
          echo "PKG_VSN=$PKG_VSN" | tee -a $GITHUB_ENV
          echo "FILENAME=$FILENAME" | tee -a $GITHUB_ENV

      - uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: upload to aws s3
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_CLOUDFRONT_ID: ${{ secrets.AWS_CLOUDFRONT_ID }}
        run: |
          set -xeuo pipefail

          export s3dir="emqx-ee/e$PKG_VSN"
          aws s3 cp "$FILENAME" "s3://$AWS_S3_BUCKET/$s3dir/"
          aws cloudfront create-invalidation --distribution-id "$AWS_CLOUDFRONT_ID" --paths "/$s3dir/*docker*"
